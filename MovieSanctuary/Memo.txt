
CollectionViewのItemには制約付けなくても、OK、ぴったんこになる
(CollectionViewの方の設定で、Itemのサイズが68と指定されているため)

標準で曇りガラスがかかっているビュー → ナビゲーションバー、タブバー、ツールバー。
曇りガラス効果をなくすには、 tabBar.isTranlucent = false とかにすればよい

・ナビゲーションバー上のタイトルの決定法則

1 > あれば、VC上のタイトル
2 > あれば、VC上の「ナビゲーションアイテム」のタイトル(優先度高)


ナビゲーションバー上の標準の戻るボタンのタイトルが何になるかは、
「ナビゲーションアイテム」のタイトルに依存する。
(もちろん left bar button itemとかわざわざ用意する必要はない。)

[Back]とかに変えたい場合は? →

・コード
let backButtonItem = UIBarButtonItem(title: "ほげ", style: .Plain, target: nil, action: nil)
navigationItem.backBarButtonItem = backButtonItem

・SB
1. 遷移元で、わざわざ「ナビゲーションアイテム」を配置する。
このペインに「Back Button」という項目があるので、ここで設定。便利。
ただしナビゲーションバーを配置した場合は、タイトルも同様に明示的に入力しないと、空文字になってしまうのでこっちも入れておく。

////////////////////

// rootViewControllerに戻る
navigationController?.popToViewController(navigationController!.viewControllers[0], animated: true)
// または
navigationController?.popToRootViewControllerAnimated(true)

// rootViewControllerの1つ先のViewControllerに戻る
navigationController?.popToViewController(navigationController!.viewControllers[1], animated: true)

// rootViewControllerの2つ先のViewControllerに戻る
navigationController?.popToViewController(navigationController!.viewControllers[2], animated: true)

// 一つ前のViewControllerに戻る
navigationController?.popViewControllerAnimated(true)


///
APIコールは遷移後でやったほうがよい。
pushViewControllerの前の行で、遷移後のVCのAPIコールメソッド呼んで...ってやってたけど、
処理追うのが難しくなり、デバッガビリティも下がる。
パラメータ渡す必要があって、var hoge: Int! とかクソダサい余計な変数増えるかもだけど、
処理の追いやすさで将来の不毛なデバッグ時間を減らせると思えばよいと思えるはずだ。
///



















